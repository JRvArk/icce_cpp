1. Describe how the compiler interprets the statement.
    We have two if-statements and one else-statement in the full statement. The
    compiler interprets the code such that the else-statement will belong to the
    closest preceding if-statement, which is the second one. The assignment of 5
    to value will belong to the second if-statement, and the assignment of 6 to
    value will belong to the else-statement.
2. Rewrite this statement using the correct layout.
    if (first == test1)
        if (second == test2)
            value = 5;
        else
            value = 6;
3. How would you change it so the 'non-default' interpretation is used?
    We can use and to make this happen:
    if (first == test1 and second == test2) value = 5; else value = 6;
4. Describe how your changed statement is interpreted.
    The first condition is tested, and if true then value will become 5. This is
    the case if both the first and second condition of the given statement are
    true. If one or both are false, then value will become 6.
5. What is a flaw in the formulation of the statement, apart of layout?
    The given statement can be improved by using a ternary operator, following
    the FLOW abbreviation. Then we'd have:
        if (first == test1)
            value = (second == test2 ? 5 : 6)

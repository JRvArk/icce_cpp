// HB:
// HB: the follow part of the exercise seems to still be missing:
// HB:
// HB: "Also look at the implications of the results for the way the functions were defined, 
// HB: in particular what you can learn from it when defining your own function parameters."
// HB:

The -O2 flag tells the compiler to do optimizations on the code, does all the optimizations to
make the code smaller and run faster without making it take more space during execution. This
comes at the cost of a longer compilation time. 

profiling results for -O2 flag:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total
 time   seconds   seconds    calls  Ts/call  Ts/call  name
14.43      1.15     0.43                             fun(std::__cxx11::basic_string<char,   
                                                     std::char_traits<char>, 
                                                     std::allocator<char> >)

 10.74      1.47     0.32                            fun2(std::__cxx11::basic_string<char,
                                                     std::char_traits<char>, 
                                                     std::allocator<char> > const&)

  1.68      2.46     0.05                      callValue(std::__cxx11::basic_string<char, 
                                                    std::char_traits<char>,       
                                                     std::allocator<char> > const&)

  0.34      2.94     0.01                       callRef(std::__cxx11::basic_string<char,
                                                     std::char_traits<char>, 
                                                     std::allocator<char> > const&)

The -O1 flag tells the compiler to optimize the code but to a lesser degree than -O2. This
flags only makes the compiler do optimizations that minimally impact compilation time. 

profiling results for -O1 flag:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total
 time   seconds   seconds    calls  Ts/call  Ts/call  name
 18.06      1.26     0.54                             fun(std::__cxx11::basic_string<char,    
                                                      std::char_traits<char>, 
                                                      std::allocator<char> >)

 11.37      1.60     0.34                             fun2(std::__cxx11::basic_string<char, 
                                                      std::char_traits<char>, 
                                                      std::allocator<char> > const&)

 1.00      2.67     0.03                      callValue(std::__cxx11::basic_string<char, 
                                                      std::char_traits<char>, 
                                                      std::allocator<char> > const&)

for some unknown reason callRef does not appear when profiling the program built with -O1


The -O3 flag tells the compiler to optimize the code for speed at the cost of memory 
efficiency. It does all the -O2 optimizations and more, which greatly increases compilation time.

profiling results for -O3 flag:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total
 time   seconds   seconds    calls  Ts/call  Ts/call  name
12.15      1.06     0.39                              fun(std::__cxx11::basic_string<char, 
                                                      std::char_traits<char>, 
                                                      std::allocator<char> >)

 11.84      1.45     0.38                             fun2(std::__cxx11::basic_string<char,  
                                                      std::char_traits<char>, 
                                                      std::allocator<char> > const&)

2.34      2.62     0.07                       callValue(std::__cxx11::basic_string<char, 
                                                      std::char_traits<char>, 
                                                      std::allocator<char> > const&)

0.93      3.06     0.03                        callRef(std::__cxx11::basic_string<char, 
                                                      std::char_traits<char>, 
                                                      std::allocator<char> > const&)


profiling results without any -O flags:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total
 time   seconds   seconds    calls  Ts/call  Ts/call  name

 13.80      1.00     0.45                             fun2(std::__cxx11::basic_string<char, 
                                                      std::char_traits<char>, 
                                                      std::allocator<char> > const&)

  9.82      1.32     0.32                             fun(std::__cxx11::basic_string<char, 
                                                      std::char_traits<char>, 
                                                      std::allocator<char> >)

  2.45      2.46     0.08                     callValue(std::__cxx11::basic_string<char, 
                                                      std::char_traits<char>, 
                                                      std::allocator<char> > const

  0.31      3.23     0.01                     callRef(std::__cxx11::basic_string<char, 
                                                      std::char_traits<char>, 
                                                      std::allocator<char> > const&)


Looking at the results we notice that generally passing arguments to a function through 
reference is generally faster. This is shown by the self time of the callRef being smaller 
than that of the callValue function in every situation. However, the function with the const
reference parameter (fun2) takes significantly longer to run than the function that takes a
copy of the value as a parameter (fun) when the program is not compiled using any  
optimization flags. But when using the optimiation flags it is faster to run the function 
that takes the arguments through reference.
